package schema

import (
	"gopkg.in/mgo.v2/bson"

	"themis/models"
	"themis/database"
)

// This creates a default schema for the given spaceID and stores it in the storage backends.
// It creates the template using code. We might want to load it from JSON or some other 
// static source at some point. For now, the default schema is hardcoded.
func createSchemaForSpaceInStorage(spaceID bson.ObjectId, storageBackends database.StorageBackends) (workItemTypeIDs []*bson.ObjectId, rootAreaID *bson.ObjectId, rootIterationID *bson.ObjectId, err error) {

	// create and store WorkItemTypes
	workItemTypes := CreateWorkItemTypes()
	for _, workItemType := range workItemTypes {
		workItemType.SpaceID = spaceID
		workItemType.ID, err = storageBackends.WorkItemType.Insert(workItemType)
		workItemTypeIDs = append(workItemTypeIDs, &workItemType.ID)
		if err != nil {
			return nil, nil, nil, err
		}
	}

	// create and store LinkCategories
	linkCategories := CreateLinkCategories()
	for _, linkCategory := range linkCategories {
		linkCategory.SpaceID = spaceID
		linkCategory.ID, err = storageBackends.LinkCategory.Insert(linkCategory)
		if err != nil {
			return nil, nil, nil, err
		}
	}

	// create and store LinkTypes
	linkTypes := CreateLinkTypes()
	for _, linkType := range linkTypes {
		linkType.SpaceID = spaceID
		// link LinkCategory by looking at the (temporary) ref 
		// attribute generated by the boostrapping
		for _, thisLinkCategory := range linkCategories {
			if thisLinkCategory.RefID == linkType.CategoryRef {
				linkType.LinkCategoryID = thisLinkCategory.ID
			}
		}
		// same for the ref to the source WorkItemType
		for _, thisWorkItemType := range workItemTypes {
			if thisWorkItemType.RefID == linkType.SourceWorkItemTypeRef {
				linkType.SourceWorkItemTypeID = thisWorkItemType.ID
			}
		}
		// same for the ref to the target WorkItemType
		for _, thisWorkItemType := range workItemTypes {
			if thisWorkItemType.RefID == linkType.TargetWorkItemTypeRef {
				linkType.TargetWorkItemTypeID = thisWorkItemType.ID
			}
		}
		linkType.ID, err = storageBackends.LinkType.Insert(linkType)
		if err != nil {
			return nil, nil, nil, err
		}
	}

	// create root area
	rootArea := models.NewArea()
	rootArea.Name = "Root Area"
	rootArea.Description = "Root Area"
	rootArea.SpaceID = spaceID
	*rootAreaID, err = storageBackends.Area.Insert(*rootArea)
	if err != nil {
		return nil, nil, nil, err
	}

	// create root iteration
	rootIteration := models.NewIteration()
	rootIteration.Name = "Root Iteration Name"
	rootIteration.Description = "Root Iteration Description"
	rootIteration.SpaceID = mockSpace.ID
	*rootIterationID, err = storageBackends.Iteration.Insert(*rootIteration)
	if err != nil {
		return nil, nil, nil, err
	}

	return workItemTypeIDs, rootAreaID, rootIterationID, nil
}

// CreateWorkItemTypes creates the default work item types.
func CreateWorkItemTypes() []models.WorkItemType {
	workItemTypes := []models.WorkItemType {
		createWorkItemTypeStory(),
		createWorkItemTypeTask(),
		createWorkItemTypeBug(),
	}
	return workItemTypes
}

// CreateLinkCategories creates the default link categories
func CreateLinkCategories() []models.LinkCategory {
	linkCategories := []models.LinkCategory {
		createLinkCategoryDefault(),
	}
	return linkCategories
}

// CreateLinkTypes creates the default link types
func CreateLinkTypes() []models.LinkType {
	linktypes := createLinkTypeChild()
	linktypes = append(linktypes, createLinkTypeBlocks()...)
	linktypes = append(linktypes, createLinkTypeRelated()...)
	return linktypes
}
